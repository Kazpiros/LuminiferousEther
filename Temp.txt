   
        uint8_t cmd_static_adCDATA = 0x41; // 0b01 0000 01 -> device addr=01, addr=0x0, static read
        uint8_t zeros[4] = {0,0,0,0};
        uint8_t rxbuf[4];

        gpio_put(PIN_CS, 0);                 // CS low -> begin SPI communication
        spi_write_blocking(SPI_PORT, &cmd_static_adCDATA, 1); // send COMMAND byte; STATUS will be clocked out now
        gpio_put(PIN_CS, 1);  
        sleep_us(10);
        CONV_START(MUX_VINP_CH0);
        sleep_us(10);
        // Now continuously clock SCK to stream ADC data.  Read in blocks matching your data width (e.g. 4 bytes for 32-bit).
        while (true) {
            gpio_put(PIN_CS, 0);   
            spi_transfer(0b01101001); // 101101 standby static read 
            spi_write_read_blocking(SPI_PORT, zeros, rxbuf, 4); // clock 4 bytes, reading DATA0..DATA3

            gpio_put(PIN_CS, 1);
            sleep_us(10);    
            // parse rxbuf into 32-bit value (depending on DATA_FORMAT)
            // Example: uint32_t sample = (rxbuf[0]<<24) | (rxbuf[1]<<16) | (rxbuf[2]<<8) | rxbuf[3];
            // (do not raise CS here; keep streaming)
        }
        //MCP3x6x_CONFIG();